[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "gpt-subtrans"
version = "1.1.2"
authors = [
    { name = "MachineWrapped", email = "machinewrapped@gmail.com" },
]
description = "An open source subtitle translator that uses LLMs as a translation service."
readme = "readme.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Multimedia :: Video",
    "Topic :: Text Processing :: Linguistic",
]
dependencies = [
    "python-dotenv",
    "srt",
    "regex",
    "appdirs",
    "requests",
    "setuptools",
    "httpx[socks]",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "ruff",
    "bandit",
    "pre-commit",
]
openai = ["openai"]
gemini = ["google-genai>=1.24.0", "google-api-core"]
claude = ["anthropic"]
mistral = ["mistralai"]
deepseek = ["openai"] # DeepSeek uses the OpenAI SDK
bedrock = ["boto3"]
all = [
    "openai",
    "google-genai>=1.24.0",
    "google-api-core",
    "anthropic",
    "mistralai",
    "boto3",
]

[project.urls]
Homepage = "https://github.com/machinewrapped/gpt-subtrans"
Issues = "https://github.com/machinewrapped/gpt-subtrans/issues"

[project.scripts]
gpt-subtrans = "PySubtitle.cli:gpt_main"
claude-subtrans = "PySubtitle.cli:claude_main"
gemini-subtrans = "PySubtitle.cli:gemini_main"
deepseek-subtrans = "PySubtitle.cli:deepseek_main"
mistral-subtrans = "PySubtitle.cli:mistral_main"
bedrock-subtrans = "PySubtitle.cli:bedrock_main"
llm-subtrans = "PySubtitle.cli:llm_main"
azure-subtrans = "PySubtitle.cli:azure_main"

[tool.setuptools.package-data]
PySubtitle = ["py.typed", "instructions/*.txt"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 127
indent-width = 4

# Assume Python 3.10 (minimum supported version)
target-version = "py310"

[tool.ruff.lint]
# Enable pycodestyle (`E`), Pyflakes (`F`), pyupgrade (`UP`),
# flake8-bugbear (`B`), flake8-simplify (`SIM`), and isort (`I`)
select = [
    "E4", "E7", "E9",  # pycodestyle errors
    "F",               # Pyflakes
    "UP",              # pyupgrade
    "B",               # flake8-bugbear
    "SIM",             # flake8-simplify
    "I",               # isort
    "C90",             # mccabe complexity
    "N",               # pep8-naming
    "W",               # pycodestyle warnings
]

ignore = [
    "E501",    # Line too long (handled by formatter)
    "E203",    # Whitespace before ':' (not PEP 8 compliant)
    "N802",    # Function name should be lowercase (PascalCase is used)
    "N803",    # Argument name should be lowercase (PascalCase is used)
    "N806",    # Variable in function should be lowercase
    "N999",    # Invalid module name (PascalCase is used)
    "B023",    # Function definition does not bind loop variable (can be complex to fix)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py files
"tests/*" = ["F841"]      # Allow unused variables in tests
"**/TestData/*" = ["ALL"] # Ignore all rules in test data files
"src/PySubtitle/Providers/Provider_*.py" = ["F401"]  # Allow unused imports in provider files (conditional imports)

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings.
docstring-code-format = false

[tool.ruff.lint.isort]
known-first-party = ["PySubtitle"]
force-single-line = false
lines-after-imports = 2
